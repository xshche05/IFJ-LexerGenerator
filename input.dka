# START - is starting state
# ANYTHING is a state
# ANYTHING_F is a final state

# Rule format: (STATE_PREV, {single char set}) -> STATE_NEW
# Predefined char sets:
# letters (a-z, A-Z)
# letters_lower (a-z)
# letters_upper (A-Z)
# digits (0-9)
# whitespaces
# white_symbols
# newline

# Rules

(START, {'{'}) -> LBRACE_F
(START, {'}'}) -> RBRACE_F
(START, {'('}) -> LPAREN_F
(START, {')'}) -> RPAREN_F
(START, {':'}) -> COLON_F
(START, {','}) -> COMMA_F

(START, {'+'}) -> PLUS_F
(START, {'-'}) -> MINUS_F
(START, {'*'}) -> MULT_F
(START, {'/'}) -> DIV_F

(START, {'='}) -> ASSIGN_F
(START, {'<'}) -> LESS_F
(START, {'>'}) -> GREATER_F

(ASSIGN_F, {'='}) -> EQ_F
(LESS_F, {'='}) -> LEQ_F
(GREATER_F, {'='}) -> GEQ_F

(START, {'_', letters}) -> ID_F
(ID_F, {'_', letters, digits}) -> ID_F

(START, {digits}) -> INT_F
(INT_F, {digits}) -> INT_F

(START, {white_symbols}) -> START
(START, {'"'}) -> STRING_START
(STRING_START, {letters, digits, ' '}) -> STRING_START
(STRING_START, {'"'}) -> STRING_F

# Tokens for FINAL STATES
# Tokens are defined as {FINAL_STATE = 'TOKEN_NAME'}

{LBRACE_F = LBRACE}
{RBRACE_F = RBRACE}
{LPAREN_F = LPAREN}
{RPAREN_F = RPAREN}
{COLON_F = COLON}
{COMMA_F = COMMA}

{PLUS_F = PLUS}
{MINUS_F = MINUS}
{MULT_F = MULT}
{DIV_F = DIV}

{ASSIGN_F = ASSIGN}
{EQ_F = EQ}
{LESS_F = LESS}
{LEQ_F = LEQ}
{GREATER_F = GREATER}
{GEQ_F = GEQ}

{ID_F = ID}
{INT_F = INT}
{STRING_F = STRING}

# Keywords, line starts with ?
# lexeme -> TOKEN_NAME

? if -> IF
? else -> ELSE
? while -> WHILE
? for -> FOR
? return -> RETURN
? break -> BREAK
? continue -> CONTINUE
? int -> INT_TYPE
? string -> STRING_TYPE